import numpy as np
import argparse
import imutils
import time
import cv2


parser = argparse.ArgumentParser()
parser.add_argument('--image')
args = parser.parse_args()
img = cv2.imread(args.image)
txt_filename = (args.image).replace(".png",".txt")
img_filename = (args.image).replace(".png","_output.png")


class swift:
    def __init__(self) -> None:
        self.centroid_list = []
        self.area_list = []
        self.centroids = []  

    def detect_alien(self,img):
        #filtering image
        erosionimg = cv2.erode(img, np.ones((7,7)), iterations=1)
        grayimg = cv2.cvtColor(erosionimg, cv2.COLOR_BGR2GRAY)
        _, thresholdimg = cv2.threshold(grayimg, 180, 255, cv2.THRESH_BINARY)
        dilationimg = cv2.dilate(thresholdimg, np.ones((7,7)), iterations=1)
        #find out counters
        contours = cv2.findContours(dilationimg, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        contours = imutils.grab_contours(contours)
        contours = sorted(contours, key=lambda c: cv2.boundingRect(c)[0])
        return contours

    def centroid_calculator(self,centroid_list):
        alien =  (len(centroid_list))
        sumofx = sum(xcoor for xcoor , _ in centroid_list)
        sumofy = sum(ycoor for _ , ycoor in centroid_list)
        centroidx = sumofx/alien
        centroidy = sumofy/alien

        if alien == 2 :
            self.centroids.append(['alien_a' , 2 ,centroidx,centroidy])
        elif alien == 3 :
            self.centroids.append(['alien_b' , 3 ,centroidx,centroidy])
        elif alien == 4 :
            self.centroids.append(['alien_c' , 4 ,centroidx,centroidy])
        elif alien == 5 :
            self.centroids.append(['alien_d' , 5 ,centroidx,centroidy])
        elif alien >= 6 :
            centroid_1 = []  # x < 256, y < 256
            centroid_2 = []  # x < 256, y > 256
            centroid_3 = []  # x > 256, y < 256
            centroid_4 = []  # x > 256, y > 256

            for x, y in centroid_list:
                if x < 256 and y < 256:
                    centroid_1.append((x, y))
                elif x < 256 and y > 256:
                    centroid_2.append((x, y))
                elif x > 256 and y < 256:
                    centroid_3.append((x, y))
                else:
                    centroid_4.append((x, y))

            if len(centroid_1) != 0:
                self.centroid_calculator(centroid_1)

            if len(centroid_2) != 0:
                self.centroid_calculator(centroid_2)

            if len(centroid_3) != 0:
                self.centroid_calculator(centroid_3)

            if len(centroid_4) != 0:
                self.centroid_calculator(centroid_4)
        return self.centroids
    
    def write(self,contours,img):
        print(len(contours))
        if len(contours)<6:
            for cont in contours:
            # Calculate the area of the contour
                area = cv2.contourArea(cont)
                # Calculate the centroid coordinates
                M = cv2.moments(cont)
                if M['m00'] != 0:
                    cx = float(M['m10'] / M['m00'])
                    cy = float(M['m01'] / M['m00'])
                else:
                    # Handle the case when the area (m00) is zero to avoid division by zero
                    cx, cy = 0, 0

                # Append centroid coordinates and area to the respective lists
                self.area_list.append(area)
                self.centroid_list.append((cx , cy))

            # Draw the bright spot on the image
            cv2.drawContours(img, contours, -1, (0, 0, 255), 2)
            #------------------------------------------------------------------------------------------------

            centroid_list = self.centroid_calculator(self.centroid_list)
            print(centroid_list)
            cv2.imshow("output",img)
            cv2.waitKey(0)
            cv2.imwrite(img_filename, img)

drone = swift()
contours= drone.detect_alien(img)
drone.write(contours,img)
